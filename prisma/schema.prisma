// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// name: 'Polo Sporting Stretch Shirt',
//       slug: 'polo-sporting-stretch-shirt',
//       category: "Men's Dress Shirts",
//       description: 'Classic Polo style with modern comfort',
//       images: [
//         '/images/sample-products/p1-1.jpg',
//         '/images/sample-products/p1-2.jpg',
//       ],
//       price: 59.99,
//       brand: 'Polo',
//       rating: 4.5,
//       numReviews: 10,
//       stock: 5,
//       isFeatured: true,
//       banner: 'banner-1.jpg',

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_idx")
  category    String
  description String
  images      String[]
  price       Decimal  @db.Decimal(12, 2)
  brand       String
  rating      Decimal  @db.Decimal(3, 2)
  numReviews  Int
  stock       Int
  isFeatured  Boolean  @default(false)
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @default("No_Name")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String // Add this for credentials login
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}

model Cart {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String?  @db.Uuid @unique
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user User? @relation(fields: [userId], references: [id])
}
